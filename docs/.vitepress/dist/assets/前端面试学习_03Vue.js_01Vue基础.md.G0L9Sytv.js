import{_ as s,o as i,c as a,R as l}from"./chunks/framework.rSPAVkc7.js";const c=JSON.parse('{"title":"Vue 基础","description":"","frontmatter":{},"headers":[],"relativePath":"前端面试学习/03Vue.js/01Vue基础.md","filePath":"前端面试学习/03Vue.js/01Vue基础.md"}'),n={name:"前端面试学习/03Vue.js/01Vue基础.md"},t=l(`<h1 id="vue-基础" tabindex="-1">Vue 基础 <a class="header-anchor" href="#vue-基础" aria-label="Permalink to &quot;Vue 基础&quot;">​</a></h1><h2 id="_1-vue-的双向数据绑定原理是什么" tabindex="-1">1. Vue 的双向数据绑定原理是什么？ <a class="header-anchor" href="#_1-vue-的双向数据绑定原理是什么" aria-label="Permalink to &quot;1. Vue 的双向数据绑定原理是什么？&quot;">​</a></h2><p><strong>答案</strong>: Vue 的双向数据绑定主要通过数据劫持和发布-订阅模式实现。具体来说：</p><ol><li>Vue 使用 Object.defineProperty（Vue 3 中使用 Proxy）来劫持数据的 getter 和 setter。</li><li>当数据被访问时，getter 会收集依赖（即使用该数据的组件）。</li><li>当数据被修改时，setter 会通知所有依赖进行更新。</li></ol><p><strong>扩展</strong>:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue 2.x 的简化实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[key];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Getting \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">internalValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Setting \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} to: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        internalValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.message; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Getting message: Hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Setting message to: World</span></span></code></pre></div><h2 id="_2-mvvm-模式是什么" tabindex="-1">2. MVVM 模式是什么？ <a class="header-anchor" href="#_2-mvvm-模式是什么" aria-label="Permalink to &quot;2. MVVM 模式是什么？&quot;">​</a></h2><p><strong>答案</strong>: MVVM 是 Model-View-ViewModel 的缩写，是一种软件架构���式：</p><ul><li>Model：代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑。</li><li>View：代表 UI 组件，它负责将数据模型转化成 UI 展现出来。</li><li>ViewModel：监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步 View 和 Model 的对象，连接 Model 和 View。</li></ul><p>在 Vue 中，ViewModel 是 Vue 的实例对象。</p><h2 id="_3-vue-的计算属性和侦听器-watcher-有何区别" tabindex="-1">3. Vue 的计算属性和侦听器（watcher）有何区别？ <a class="header-anchor" href="#_3-vue-的计算属性和侦听器-watcher-有何区别" aria-label="Permalink to &quot;3. Vue 的计算属性和侦听器（watcher）有何区别？&quot;">​</a></h2><p><strong>答案</strong>:</p><ol><li>计算属性： <ul><li>基于它们的响应式依赖进行缓存</li><li>只在相关响应式依赖发生改变时它们才会重新求值</li><li>应用于复杂逻辑的处理</li></ul></li><li>侦听器： <ul><li>更通用的方式来观察和响应 Vue 实例上的数据变动</li><li>当需要在数据变化时执行异步或开销较大的操作时使用</li></ul></li></ol><p>计算属性适合用于简单的数据处理，而侦听器适合需要执行异步操作或较复杂逻辑的场景。</p><h2 id="_4-vue-中-key-的作用是什么" tabindex="-1">4. Vue 中 key 的作用是什么？ <a class="header-anchor" href="#_4-vue-中-key-的作用是什么" aria-label="Permalink to &quot;4. Vue 中 key 的作用是什么？&quot;">​</a></h2><p><strong>答案</strong>: 在 Vue 的虚拟 DOM 算法中，key 的主要作用是为了高效的更新虚拟 DOM。具体来说：</p><ol><li>key 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。</li><li>如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。</li><li>使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li><li>有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。</li></ol><h2 id="_5-v-if-和-v-show-的区别是什么" tabindex="-1">5. v-if 和 v-show 的区别是什么？ <a class="header-anchor" href="#_5-v-if-和-v-show-的区别是什么" aria-label="Permalink to &quot;5. v-if 和 v-show 的区别是什么？&quot;">​</a></h2><p><strong>答案</strong>:</p><ol><li>v-if： <ul><li>真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li>是&quot;惰性的&quot;：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li></ul></li><li>v-show： <ul><li>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</li><li>有更高的初始渲染开销，但是切换开销很小。</li></ul></li></ol><p>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><h2 id="_6-vue-中的-v-for-为什么要用-key" tabindex="-1">6. Vue 中的 v-for 为什么要用 key？ <a class="header-anchor" href="#_6-vue-中的-v-for-为什么要用-key" aria-label="Permalink to &quot;6. Vue 中的 v-for 为什么要用 key？&quot;">​</a></h2><p><strong>答案</strong>: 在 v-for 中使用 key 主要有以下原因：</p><ol><li>帮助 Vue 跟踪每个节点的身份，从而重用和重新排序现有元素。</li><li>提高渲染的效率：当数据项的顺序被改变时，Vue 将移动 DOM 元素来匹配数据项的顺序，而不是重新渲染整个列表。</li><li>维护组件的���态：在列表渲染中，如果组件有状态，使用 key 可以确保组件的状态被正确地维护。</li></ol><p>没有 key 的情况下，Vue 会尝试最小化元素的移动，并且尽可能地就地复用或修改现有的元素。这可能会导致一些意外的行为。</p><h2 id="_7-vue-组件中-data-为什么必须是一个函数" tabindex="-1">7. Vue 组件中 data 为什么必须是一个函数？ <a class="header-anchor" href="#_7-vue-组件中-data-为什么必须是一个函数" aria-label="Permalink to &quot;7. Vue 组件中 data 为什么必须是一个函数？&quot;">​</a></h2><p><strong>答案</strong>: 在 Vue 组件中，data 必须是一个函数，而不是一个对象。这是因为：</p><ol><li>组件可能被用来创建多个实例。如果 data 是一个对象，则所有的实例将共享引用同一个数据对象。</li><li>通过提供 data 函数，每次创建一个新的实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</li><li>这样，每个组件实例都可以维护一份被返回对象的独立的拷贝，不会相互影响。</li></ol><p>如果 data 是一个对象，那么所有的组件实例将共享同一个对象，造成数据污染。</p><h2 id="_8-vue-的生命周期方法有哪些" tabindex="-1">8. Vue 的生命周期方法有哪些？ <a class="header-anchor" href="#_8-vue-的生命周期方法有哪些" aria-label="Permalink to &quot;8. Vue 的生命周期方法有哪些？&quot;">​</a></h2><p><strong>答案</strong>: Vue 2.x 的主要生命周期方法包括：</p><ol><li>beforeCreate：实例初始化之后，数据观测和事件配置之前调用。</li><li>created：实例创建完成后调用，此时已完成数据观测、属性和方法的运算，但尚未开始 DOM 渲染。</li><li>beforeMount：在挂载开始之前被调用，相关的 render 函数首次被调���。</li><li>mounted：实例被挂载后调用，此时 el 被新创建的 vm.$el 替换了。</li><li>beforeUpdate：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li>updated：由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ol><p>Vue 3.x 新增了 setup()，这是一个组合式 API，它在 beforeCreate 钩子之前被调用。</p><h2 id="_9-vue-中的指令有哪些" tabindex="-1">9. Vue 中的指令有哪些？ <a class="header-anchor" href="#_9-vue-中的指令有哪些" aria-label="Permalink to &quot;9. Vue 中的指令有哪些？&quot;">​</a></h2><p><strong>答案</strong>: Vue 中常用的指令包括：</p><ol><li>v-bind：动态地绑定一个或多个属性，或一个组件 prop 到表达式。</li><li>v-on：绑定事件监听器。</li><li>v-model：在表单控件或者组件上创建双向绑定。</li><li>v-if, v-else, v-else-if：条件渲染。</li><li>v-show：根据条件展示元素。</li><li>v-for：基于源数据多次渲染元素或模板块。</li><li>v-text：更新元素的文本内容。</li><li>v-html：更新元素的 innerHTML。</li><li>v-pre：跳过这个元素和它的子元素的编译过程。</li><li>v-cloak：这个指令保持在元素上直到关联实例结束编译。</li><li>v-once：只渲染元素和组件一次。</li></ol><p>此外，Vue 还支持自定义指令。</p><h2 id="_10-vue-中的过滤器是什么-如何使用" tabindex="-1">10. Vue 中的过滤器是什么？如何使用？ <a class="header-anchor" href="#_10-vue-中的过滤器是什么-如何使用" aria-label="Permalink to &quot;10. Vue 中的过滤器是什么？如何使用？&quot;">​</a></h2><p><strong>答案</strong>: 过滤器是 Vue 中用于常见文本格式化的方法。它们可以用在两个地方：双花括号插值和 v-bind 表达式。</p><p>使用方法：</p><ol><li>在组件的选项中定义本地的过滤器：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  capitalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>在模板中使用：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在双花括号中 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ message | capitalize }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在 v-bind 中 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rawId | formatId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意：在 Vue 3.0 中，过滤器已被移除，官方建议用方法调用或计算属性来替换它们。</p><h2 id="_11-vue-中的-mixins-是什么-如何使用" tabindex="-1">11. Vue 中的 mixins 是什么？如何使用？ <a class="header-anchor" href="#_11-vue-中的-mixins-是什么-如何使用" aria-label="Permalink to &quot;11. Vue 中的 mixins 是什么？如何使用？&quot;">​</a></h2><p><strong>答案</strong>: Mixins 是一种分发 Vue 组件中可复用功能的非常灵活的方式。mixin 对象可以包含任意组件选项。当组件使用 mixin 对象时，所有 mixin 对象的选项将被混入该组件本身的选项。</p><p>使用方法：</p><ol><li>定义一个 mixin 对象：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myMixin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello from mixin!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>在组件中使用 mixin：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mixins: [myMixin]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>当组件和 mixin 对象含有同名选项时，这些选项将以恰当的方式混合。比如，数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。</p><h2 id="_12-vue-中的-slot-是什么-如何使用" tabindex="-1">12. Vue 中的 slot 是什么？如何使用？ <a class="header-anchor" href="#_12-vue-中的-slot-是什么-如何使用" aria-label="Permalink to &quot;12. Vue 中的 slot 是什么？如何使用？&quot;">​</a></h2><p><strong>答案</strong>: slot（插槽）是 Vue 实现的一套内容分发的 API，用于复合组件开发。它允许你在使用组件时，向组件内部指定位置传递内容。</p><p>使用方法：</p><ol><li>在子组件中定义插槽：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;默认内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li>在父组件中使用插槽：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">child-component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是一些插槽内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">child-component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Vue 还支持具名插槽和作用域插槽，用于更复杂的内容分发场景。</p><h2 id="_13-vue-中的自定义指令是什么-如何定义" tabindex="-1">13. Vue 中的自定义指令是什么？如何定义？ <a class="header-anchor" href="#_13-vue-中的自定义指令是什么-如何定义" aria-label="Permalink to &quot;13. Vue 中的自定义指令是什么？如何定义？&quot;">​</a></h2><p><strong>答案</strong>: 除了核心功能默认内置的指令，Vue 也允许注册自定义指令。自定义指令主要用于对普通 DOM 元素进行底层操作。</p><p>定义方法：</p><ol><li>全局定义：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;focus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol start="2"><li>局部定义：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用���定义指令：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>自定义指令定义对象中可以提供几个钩子函数：bind、inserted、update、componentUpdated、unbind，它们分别在不同的时机被调用。</p><h2 id="_14-vue-中的-keep-alive-是什么" tabindex="-1">14. Vue 中的 keep-alive 是什么？ <a class="header-anchor" href="#_14-vue-中的-keep-alive-是什么" aria-label="Permalink to &quot;14. Vue 中的 keep-alive 是什么？&quot;">​</a></h2><p><strong>答案</strong>: <code>&lt;keep-alive&gt;</code> 是 Vue 的内置组件，可以使被包含的组件保留状态，避免重新渲染。</p><p>主要特性：</p><ol><li>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</li><li>和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</li><li>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</li></ol><p>使用示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;currentComponent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>&lt;keep-alive&gt;</code> 常用于保存组件状态或避免重新渲染，例如标签页切换时保持每个标签页的状态。</p><h2 id="_15-vue-中的-nexttick-是什么" tabindex="-1">15. Vue 中的 nextTick 是什么？ <a class="header-anchor" href="#_15-vue-中的-nexttick-是什么" aria-label="Permalink to &quot;15. Vue 中的 nextTick 是什么？&quot;">​</a></h2><p><strong>答案</strong>: Vue.nextTick 用于在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><p>nextTick 主要用于以下场景：</p><ol><li>在 Vue 生命周期的 created() 钩子函数进行 DOM 操作时。</li><li>在数据变化后要执行的���个操作，而这个操作需要使用随数据改变而改变的 DOM 结构时。</li></ol><p>使用方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vm.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOM 还没有更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // DOM 更新了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 作为一个 Promise 使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // DOM 更新了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><p>nextTick 的实现主要利用了 JavaScript 的事件循环机制。</p>`,85),e=[t];function h(p,k,E,r,d,g){return i(),a("div",null,e)}const y=s(n,[["render",h]]);export{c as __pageData,y as default};
