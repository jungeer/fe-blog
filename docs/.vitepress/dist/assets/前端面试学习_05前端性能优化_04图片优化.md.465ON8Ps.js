import{_ as s,o as i,c as a,R as l}from"./chunks/framework.rSPAVkc7.js";const c=JSON.parse('{"title":"图片优化","description":"","frontmatter":{},"headers":[],"relativePath":"前端面试学习/05前端性能优化/04图片优化.md","filePath":"前端面试学习/05前端性能优化/04图片优化.md"}'),t={name:"前端面试学习/05前端性能优化/04图片优化.md"},n=l(`<h1 id="图片优化" tabindex="-1">图片优化 <a class="header-anchor" href="#图片优化" aria-label="Permalink to &quot;图片优化&quot;">​</a></h1><h2 id="_1-为什么图片优化对前端性能很重要" tabindex="-1">1. 为什么图片优化对前端性能很重要？ <a class="header-anchor" href="#_1-为什么图片优化对前端性能很重要" aria-label="Permalink to &quot;1. 为什么图片优化对前端性能很重要？&quot;">​</a></h2><p><strong>答案</strong>：图片优化很重要，因为：</p><ol><li>图片通常占据页面大部分的下载量</li><li>大图片会延长页面加载时间</li><li>移动设备上，大图片会消耗更多的带宽和电量</li><li>图片优化可以显著提升用户体验和页面性能</li></ol><h2 id="_2-什么是响应式图片-如何实现" tabindex="-1">2. 什么是响应式图片？如何实现？ <a class="header-anchor" href="#_2-什么是响应式图片-如何实现" aria-label="Permalink to &quot;2. 什么是响应式图片？如何实现？&quot;">​</a></h2><p><strong>答案</strong>：响应式图片是根据设备屏幕大小和分辨率自动调整的图片。实现方法：</p><ol><li>使用srcset和sizes属性</li><li>使用picture元素</li><li>使用CSS媒体查询</li></ol><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;small.jpg 300w, medium.jpg 600w, large.jpg 900w&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     sizes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(max-width: 300px) 300px, (max-width: 600px) 600px, 900px&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fallback.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Responsive image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_3-什么是图片懒加载-如何实现" tabindex="-1">3. 什么是图片懒加载？如何实现？ <a class="header-anchor" href="#_3-什么是图片懒加载-如何实现" aria-label="Permalink to &quot;3. 什么是图片懒加载？如何实现？&quot;">​</a></h2><p><strong>答案</strong>：图片懒加载是一种延迟加载图片的技术，只有当图片进入（或接近）视口时才加载。实现方法：</p><ol><li>使用Intersection Observer API</li><li>使用scroll事件（性能较差）</li><li>使用第三方库如lazysizes</li></ol><p>示例（使用Intersection Observer）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntersectionObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.isIntersecting) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.target;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.dataset.src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unobserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;img[data-src]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img));</span></span></code></pre></div><h2 id="_4-如何选择合适的图片格式" tabindex="-1">4. 如何选择合适的图片格式？ <a class="header-anchor" href="#_4-如何选择合适的图片格式" aria-label="Permalink to &quot;4. 如何选择合适的图片格式？&quot;">​</a></h2><p><strong>答案</strong>：选择图片格式的考虑因素：</p><ol><li>JPEG：适合照片和复杂图像，有损压缩</li><li>PNG：适合需要透明度的图像，无损压缩</li><li>WebP：Google开发的格式，同时支持有损和无损压缩，文件更小</li><li>SVG：适合图标和简单图形，可缩放</li><li>AVIF：新一代图像格式，压缩率更高</li></ol><p>根据图片内容和用途选择合适的格式。</p><h2 id="_5-什么是图片精灵-css-sprites-它如何提高性能" tabindex="-1">5. 什么是图片精灵（CSS Sprites）？它如何提高性能？ <a class="header-anchor" href="#_5-什么是图片精灵-css-sprites-它如何提高性能" aria-label="Permalink to &quot;5. 什么是图片精灵（CSS Sprites）？它如何提高性能？&quot;">​</a></h2><p><strong>答案</strong>：图片精灵是将多个小图标或图片合并到一个大图片中，然后通过CSS的background-position属性显示所需部分。它提高性能因为：</p><ol><li>减少HTTP请求数</li><li>减少总下载量（一个大文件通常小于多个小文件的总和）</li><li>减少服务器负载</li></ol><p>使用示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sprites.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon-home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon-user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre></div><h2 id="_6-如何使用webp格式-如何处理浏览器兼容性" tabindex="-1">6. 如何使用WebP格式？如何处理浏览器兼容性？ <a class="header-anchor" href="#_6-如何使用webp格式-如何处理浏览器兼容性" aria-label="Permalink to &quot;6. 如何使用WebP格式？如何处理浏览器兼容性？&quot;">​</a></h2><p><strong>答案</strong>：使用WebP并处理兼容性：</p><ol><li>使用picture元素提供多种格式</li><li>服务器端根据Accept头选择合适的格式</li><li>使用JavaScript检测WebP支持并动态替换</li></ol><p>示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.webp&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/webp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fallback image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_7-如何优化背景图片" tabindex="-1">7. 如何优化背景图片？ <a class="header-anchor" href="#_7-如何优化背景图片" aria-label="Permalink to &quot;7. 如何优化背景图片？&quot;">​</a></h2><p><strong>答案</strong>：优化背景图片的方法：</p><ol><li>使用CSS渐变代替简单的背景图片</li><li>对于大背景图，考虑使用media query根据屏幕大小加载不同尺寸</li><li>使用background-size: cover适配不同屏幕</li><li>考虑使用SVG作为背景图，特别是对于图标和简单图形</li><li>使用WebP格式（配合回退方案）</li></ol><h2 id="_8-什么是图片cdn-它如何提升性能" tabindex="-1">8. 什么是图片CDN？它如何提升性能？ <a class="header-anchor" href="#_8-什么是图片cdn-它如何提升性能" aria-label="Permalink to &quot;8. 什么是图片CDN？它如何提升性能？&quot;">​</a></h2><p><strong>答案</strong>：图片CDN是专门用于存储和分发图片的内容分发网络。它提升性能因为：</p><ol><li>就近服务，减少延迟</li><li>自动选择最佳格式和大小</li><li>提供实时图片处理（如裁剪、压缩）</li><li>缓存优化</li><li>减轻源服务器负载</li></ol><h2 id="_9-如何使用svg-svg相比于位图有什么优势" tabindex="-1">9. 如何使用SVG？SVG相比于位图有什么优势？ <a class="header-anchor" href="#_9-如何使用svg-svg相比于位图有什么优势" aria-label="Permalink to &quot;9. 如何使用SVG？SVG相比于位图有什么优势？&quot;">​</a></h2><p><strong>答案</strong>：使用SVG：</p><ol><li>直接在HTML中嵌入SVG代码</li><li>使用img标签引用SVG文件</li><li>作为背景图片使用</li></ol><p>SVG的优势：</p><ol><li>可无损缩放</li><li>文件体积通常较小</li><li>可以通过CSS和JavaScript操作</li><li>适合图标和简单图形</li></ol><h2 id="_10-如何在开发过程中进行图片优化" tabindex="-1">10. 如何在开发过程中进行图片优化？ <a class="header-anchor" href="#_10-如何在开发过程中进行图片优化" aria-label="Permalink to &quot;10. 如何在开发过程中进行图片优化？&quot;">​</a></h2><p><strong>答案</strong>：开发过程中的图片优化：</p><ol><li>使用构建工具（如webpack）自动优化图片</li><li>使用图片压缩工具（如TinyPNG）</li><li>使用适当的图片格式和大小</li><li>实现懒加载</li><li>使用响应式图片技术</li><li>考虑使用现代图片格式（如WebP, AVIF）</li><li>使用图片CDN</li><li>定期审查和更新网站图片</li></ol>`,42),h=[n];function p(k,e,r,E,d,g){return i(),a("div",null,h)}const y=s(t,[["render",p]]);export{c as __pageData,y as default};
