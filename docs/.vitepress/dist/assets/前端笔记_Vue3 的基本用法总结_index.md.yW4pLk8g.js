import{_ as a,o as e,c as s,R as t}from"./chunks/framework.rSPAVkc7.js";const n="/fe-blog/assets/data.dKj-FMIk.png",o="/fe-blog/assets/attribute.aWQphnQb.png",r="/fe-blog/assets/event.4kKSPsb3.png",p="/fe-blog/assets/model.k_PFo8NN.png",i="/fe-blog/assets/ifelse.v9FN1Jrl.png",l="/fe-blog/assets/for.xO8nCMbA.png",c="/fe-blog/assets/computed.0orxY81f.png",h="/fe-blog/assets/created.lyWrT8VD.png",g="/fe-blog/assets/watch.dW7CdKwA.png",d="/fe-blog/assets/component.tTX80Lp8.png",m="/fe-blog/assets/props._yZJVREP.png",u="/fe-blog/assets/emits.Kh65m19k.png",b="/fe-blog/assets/slots.3dBT6qfc.png",C=JSON.parse('{"title":"Vue3 的基本用法总结","description":"","frontmatter":{},"headers":[],"relativePath":"前端笔记/Vue3 的基本用法总结/index.md","filePath":"前端笔记/Vue3 的基本用法总结/index.md"}'),_={name:"前端笔记/Vue3 的基本用法总结/index.md"},f=t(`<h1 id="vue3-的基本用法总结" tabindex="-1">Vue3 的基本用法总结 <a class="header-anchor" href="#vue3-的基本用法总结" aria-label="Permalink to &quot;Vue3 的基本用法总结&quot;">​</a></h1><p>该页面假设你已经阅读过了 <a href="/fe-blog/Vue2 的基本用法总结/">Vue2 的基本用法总结</a>。如果你还对 Vue2 不太了解，推荐你先阅读它。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>❗️❗️</span></span>
<span class="line"><span>Vue3.0 相比 Vue2.0 的写法区别主要有 🚀</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. Vue3.0 的响应式声明使用的是 ref，reactive 等 API 声明的</span></span>
<span class="line"><span>2. Vue3.0 使用 template 实现 for 循环的时候，key 值是绑定在 template 上的</span></span>
<span class="line"><span>3. computed，watch 也都是通过 API 来使用，还多了一些 watchEffect 等，可以参考官网</span></span>
<span class="line"><span>4. v-model 在实现组件封装上比 Vue2.0 更灵活了，如 v-model:value, v-model:visible 等</span></span>
<span class="line"><span>5. 对 ref 的引用，vue2 是通过 this.$refs 来获取，vue3 是通过 ref 变量绑定来获取</span></span>
<span class="line"><span>6. 属性（props）和组件事件通信（emit) 分别使用 defineProps, defineEmits 来定义</span></span>
<span class="line"><span>7. script 的 setup 语法糖是真好用 💯🔥</span></span>
<span class="line"><span></span></span>
<span class="line"><span>......</span></span></code></pre></div><h2 id="声明式渲染" tabindex="-1"><strong>声明式渲染</strong> <a class="header-anchor" href="#声明式渲染" aria-label="Permalink to &quot;**声明式渲染**&quot;">​</a></h2><p><img src="`+n+'" alt="data.png"></p><h2 id="attribute-绑定" tabindex="-1"><strong>Attribute 绑定</strong> <a class="header-anchor" href="#attribute-绑定" aria-label="Permalink to &quot;**Attribute 绑定**&quot;">​</a></h2><p><img src="'+o+'" alt="attribute.png"></p><h2 id="事件监听" tabindex="-1"><strong>事件监听</strong> <a class="header-anchor" href="#事件监听" aria-label="Permalink to &quot;**事件监听**&quot;">​</a></h2><p><img src="'+r+'" alt="image.png"></p><h2 id="v-model-双向绑定" tabindex="-1"><strong>v-model 双向绑定</strong> <a class="header-anchor" href="#v-model-双向绑定" aria-label="Permalink to &quot;**v-model 双向绑定**&quot;">​</a></h2><p><img src="'+p+'" alt="image.png"></p><h2 id="条件渲染" tabindex="-1"><strong>条件渲染</strong> <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;**条件渲染**&quot;">​</a></h2><p><img src="'+i+'" alt="image.png"></p><h2 id="列表渲染" tabindex="-1"><strong>列表渲染</strong> <a class="header-anchor" href="#列表渲染" aria-label="Permalink to &quot;**列表渲染**&quot;">​</a></h2><p><img src="'+l+'" alt="image.png"></p><h2 id="计算属性-computed" tabindex="-1"><strong>计算属性（computed)</strong> <a class="header-anchor" href="#计算属性-computed" aria-label="Permalink to &quot;**计算属性（computed)**&quot;">​</a></h2><p><img src="'+c+'" alt="image.png"></p><h2 id="生命周期与模版引用" tabindex="-1"><strong>生命周期与模版引用</strong> <a class="header-anchor" href="#生命周期与模版引用" aria-label="Permalink to &quot;**生命周期与模版引用**&quot;">​</a></h2><p><img src="'+h+'" alt="image.png"></p><h2 id="监听器-watch" tabindex="-1"><strong>监听器（watch）</strong> <a class="header-anchor" href="#监听器-watch" aria-label="Permalink to &quot;**监听器（watch）**&quot;">​</a></h2><p><img src="'+g+'" alt="image.png"></p><h2 id="引入组件" tabindex="-1"><strong>引入组件</strong> <a class="header-anchor" href="#引入组件" aria-label="Permalink to &quot;**引入组件**&quot;">​</a></h2><p><img src="'+d+'" alt="image.png"></p><h2 id="属性传值" tabindex="-1"><strong>属性传值</strong> <a class="header-anchor" href="#属性传值" aria-label="Permalink to &quot;**属性传值**&quot;">​</a></h2><p><img src="'+m+'" alt="image.png"></p><h2 id="事件通信" tabindex="-1"><strong>事件通信</strong> <a class="header-anchor" href="#事件通信" aria-label="Permalink to &quot;**事件通信**&quot;">​</a></h2><p><img src="'+u+'" alt="image.png"></p><h2 id="插槽" tabindex="-1"><strong>插槽</strong> <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;**插槽**&quot;">​</a></h2><p><img src="'+b+'" alt="image.png"></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://cn.vuejs.org/tutorial/#step-1" target="_blank" rel="noreferrer">教程 | Vue.js</a></p>',31),q=[f];function k(P,v,x,V,A,T){return e(),s("div",null,q)}const N=a(_,[["render",k]]);export{C as __pageData,N as default};
