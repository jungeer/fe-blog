import{_ as t,o as i,c as s,R as r}from"./chunks/framework.rSPAVkc7.js";const f=JSON.parse('{"title":"Git 常见命令","description":"","frontmatter":{},"headers":[],"relativePath":"前端笔记/Git 常见命令/index.md","filePath":"前端笔记/Git 常见命令/index.md"}'),o={name:"前端笔记/Git 常见命令/index.md"},g=r('<h1 id="git-常见命令" tabindex="-1">Git 常见命令 <a class="header-anchor" href="#git-常见命令" aria-label="Permalink to &quot;Git 常见命令&quot;">​</a></h1><h2 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h2><ul><li><strong>git init</strong>: 初始化 Git 仓库</li><li><strong>git clone</strong>: 克隆远程 Git 仓库到本地</li><li><strong>git pull</strong>: 从远程仓库拉取代码</li><li><strong>git add</strong>: 添加文件到暂存区</li><li><strong>git commit</strong>: 提交暂存区文件到 Git 仓库</li><li><strong>git commit --amend --message &quot;new commit message</strong>&quot;: 修改上次提交信息</li><li><strong>git push</strong>: 推送代码到远程仓库</li><li><strong>git status</strong>: 查看仓库状态</li><li><strong>git diff</strong>: 查看工作区和暂存区的差异</li><li><strong>git log</strong>: 查看提交历史</li><li><strong>git branch</strong>: 查看本地分支列表</li><li><strong>git checkout</strong>: 切换分支</li><li><strong>git merge</strong>: 合并分支</li><li><strong>git remote</strong>: 查看远程仓库信息</li></ul><h2 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h2><ul><li><strong>git branch</strong>: 查看分支列表</li><li><strong>git branch &lt;branchname&gt;</strong>: 创建分支</li><li><strong>git branch -d &lt;branchname&gt;</strong>: 删除本地分支</li><li><strong>git checkout</strong>: 切换分支</li><li><strong>git merge</strong>: 合并分支</li><li><strong>git merge --no-ff</strong>: 合并分支并保留分支历史</li><li><strong>git push &lt;remote&gt; --delete &lt;branchname&gt;</strong>: 删除远程分支</li></ul><h2 id="标签操作" tabindex="-1">标签操作 <a class="header-anchor" href="#标签操作" aria-label="Permalink to &quot;标签操作&quot;">​</a></h2><ul><li><strong>git tag</strong>: 查看标签列表</li><li><strong>git tag &lt;tagname&gt;</strong>: 创建标签</li><li><strong>git tag -a &lt;tagname&gt; -m &quot;message&quot;</strong>: 创建带有注释的标签</li><li><strong>git push &lt;remote&gt; &lt;tagname&gt;</strong>: 推送标签到远程仓库</li><li><strong>git push &lt;remote&gt; --tags</strong>: 推送所有标签到远程仓库</li></ul><h2 id="远程操作" tabindex="-1">远程操作 <a class="header-anchor" href="#远程操作" aria-label="Permalink to &quot;远程操作&quot;">​</a></h2><ul><li><strong>git remote</strong>: 查看远程仓库信息</li><li><strong>git remote add</strong>: 添加远程仓库</li><li><strong>git remote set-url</strong>: 修改远程仓库 URL</li><li><strong>git fetch</strong>: 从远程仓库拉取代码</li><li><strong>git pull</strong>: 从远程仓库拉取代码并合并到当前分支</li><li><strong>git push</strong>: 推送代码到远程仓库</li></ul><h2 id="撤销操作" tabindex="-1">撤销操作 <a class="header-anchor" href="#撤销操作" aria-label="Permalink to &quot;撤销操作&quot;">​</a></h2><ul><li><strong>git reset</strong>: 撤销暂存区的所有修改</li><li><strong>git reset &lt;filename&gt;</strong>: 撤销暂存区指定文件的修改</li><li><strong>git checkout -- &lt;filename&gt;</strong>: 撤销工作区指定文件的修改</li><li><strong>git revert &lt;commit&gt;</strong>: 撤销指定提交的修改</li><li><strong>git reset --hard</strong>: 重置工作区、暂存区和 Git 仓库的状态</li></ul><h2 id="配置操作" tabindex="-1">配置操作 <a class="header-anchor" href="#配置操作" aria-label="Permalink to &quot;配置操作&quot;">​</a></h2><ul><li><strong>git config</strong>: 查看、添加或修改 Git 配置</li><li><strong>git config --global user.name &lt;username&gt;</strong>: 设置 Git 全局用户名</li><li><strong>git config --global user.email &lt;email&gt;</strong>: 设置 Git 全局用户邮箱</li><li><strong>git config --system</strong>: 修改系统级别 Git 配置</li><li><strong>git config --local</strong>: 修改当前仓库 Git 配置</li><li><strong>git config --unset</strong>: 删除 Git 配置项</li></ul><h2 id="暂存操作" tabindex="-1">暂存操作 <a class="header-anchor" href="#暂存操作" aria-label="Permalink to &quot;暂存操作&quot;">​</a></h2><ul><li><strong>git stash</strong>: 将未提交的修改保存到 Git 的 stash 中，以便之后恢复或者应用。使用 <strong>git stash</strong> 命令后，工作区和暂存区的修改都会被保存。</li><li><strong>git stash save &quot;message&quot;</strong>: 将未提交的修改保存到 Git 的 stash 中，并为当前的 stash 设置一个描述信息。描述信息可以帮助我们更好地理解 stash 中保存的内容。</li><li><strong>git stash list</strong>: 列出所有保存在 stash 中的修改。每个 stash 都有一个唯一的标识符，可以用来区分不同的 stash。</li><li><strong>git stash apply &lt;stash&gt;</strong>: 将指定的 stash 应用到当前分支中，但是不会删除该 stash。如果要删除该 stash，需要使用 <strong>git stash drop</strong> 命令。</li><li><strong>git stash pop</strong>: 将最近保存的 stash 应用到当前分支中，并删除该 stash。</li><li><strong>git stash drop &lt;stash&gt;</strong>: 删除指定的 stash。</li><li><strong>git stash clear</strong>: 删除所有的 stash。</li><li><strong>git stash branch &lt;branchname&gt;</strong>: 基于 stash 创建一个新的分支，并将该 stash 应用到新的分支中。新分支包含了 stash 中的所有修改。</li></ul><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noreferrer">Git Book</a></p>',17),l=[g];function a(n,e,h,c,u,m){return i(),s("div",null,l)}const b=t(o,[["render",a]]);export{f as __pageData,b as default};
