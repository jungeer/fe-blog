import{_ as i,o as s,c as a,R as t}from"./chunks/framework.rSPAVkc7.js";const F=JSON.parse('{"title":"Git与版本控制","description":"","frontmatter":{},"headers":[],"relativePath":"前端面试学习/07前端工程化与工具/04Git与版本控制.md","filePath":"前端面试学习/07前端工程化与工具/04Git与版本控制.md"}'),l={name:"前端面试学习/07前端工程化与工具/04Git与版本控制.md"},e=t(`<h1 id="git与版本控制" tabindex="-1">Git与版本控制 <a class="header-anchor" href="#git与版本控制" aria-label="Permalink to &quot;Git与版本控制&quot;">​</a></h1><h2 id="_1-什么是版本控制系统-git的主要特点是什么" tabindex="-1">1. 什么是版本控制系统？Git的主要特点是什么？ <a class="header-anchor" href="#_1-什么是版本控制系统-git的主要特点是什么" aria-label="Permalink to &quot;1. 什么是版本控制系统？Git的主要特点是什么？&quot;">​</a></h2><p><strong>答案</strong>：版本控制系统是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。Git的主要特点包括：</p><ol><li>分布式版本控制系统</li><li>快速、高效</li><li>支持非线性开发（分支）</li><li>完全分布式</li><li>能够处理大型项目</li></ol><h2 id="_2-git的工作区、暂存区和版本库概念是什么" tabindex="-1">2. Git的工作区、暂存区和版本库概念是什么？ <a class="header-anchor" href="#_2-git的工作区、暂存区和版本库概念是什么" aria-label="Permalink to &quot;2. Git的工作区、暂存区和版本库概念是什么？&quot;">​</a></h2><p><strong>答案</strong>：</p><ul><li>工作区：当前工作目录，包含项目的实际文件</li><li>暂存区：保存了下次将要提交的文件列表信息，也称为索引</li><li>版本库：Git用来保存项目的元数据和对象数据库的地方</li></ul><h2 id="_3-如何创建git仓库-基本的git工作流是什么" tabindex="-1">3. 如何创建Git仓库？基本的Git工作流是什么？ <a class="header-anchor" href="#_3-如何创建git仓库-基本的git工作流是什么" aria-label="Permalink to &quot;3. 如何创建Git仓库？基本的Git工作流是什么？&quot;">​</a></h2><p><strong>答案</strong>：创建Git仓库：</p><ol><li>git init：在现有目录中初始化仓库</li><li>git clone [url]：克隆现有的仓库</li></ol><p>基本Git工作流：</p><ol><li>在工作目录中修改文件</li><li>暂存文件，将文件的快照放入暂存区域（git add）</li><li>提交更新，找到暂存区的文件，将快照永久性存储到Git仓库目录（git commit）</li></ol><h2 id="_4-git中的分支管理是如何工作的-如何创建、切换和合并分支" tabindex="-1">4. Git中的分支管理是如何工作的？如何创建、切换和合并分支？ <a class="header-anchor" href="#_4-git中的分支管理是如何工作的-如何创建、切换和合并分支" aria-label="Permalink to &quot;4. Git中的分支管理是如何工作的？如何创建、切换和合并分支？&quot;">​</a></h2><p><strong>答案</strong>：Git分支本质上是指向提交对象的可变指针。</p><ul><li>创建分支：git branch [branch-name]</li><li>切换分支：git checkout [branch-name] 或 git switch [branch-name]（Git 2.23+）</li><li>创建并切换分支：git checkout -b [branch-name]</li><li>合并分支：git merge [branch-name]</li></ul><p>示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在feature分支上工作...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span></code></pre></div><h2 id="_5-什么是git的rebase-它与merge有什么区别" tabindex="-1">5. 什么是Git的rebase？它与merge有什么区别？ <a class="header-anchor" href="#_5-什么是git的rebase-它与merge有什么区别" aria-label="Permalink to &quot;5. 什么是Git的rebase？它与merge有什么区别？&quot;">​</a></h2><p><strong>答案</strong>：rebase是将一系列提交按照原有次序依次应用到另一分支上，而merge是把两个分支的最新快照合并在一起。</p><p>区别：</p><ol><li>rebase使提交历史更加整洁</li><li>merge保留了完整的历史记录</li><li>rebase改变了提交历史，merge不会改变现有的提交历史</li></ol><p>示例（rebase）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h2 id="_6-如何解决git中的冲突" tabindex="-1">6. 如何解决Git中的冲突？ <a class="header-anchor" href="#_6-如何解决git中的冲突" aria-label="Permalink to &quot;6. 如何解决Git中的冲突？&quot;">​</a></h2><p><strong>答案</strong>：解决Git冲突的步骤：</p><ol><li>运行git status查看哪些文件发生冲突</li><li>打开冲突文件，查找冲突标记（&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;）</li><li>编辑文件解决冲突</li><li>使用git add标记冲突已解决</li><li>提交更改（git commit）</li></ol><h2 id="_7-什么是git的远程仓库-如何与远程仓库交互" tabindex="-1">7. 什么是Git的远程仓库？如何与远程仓库交互？ <a class="header-anchor" href="#_7-什么是git的远程仓库-如何与远程仓库交互" aria-label="Permalink to &quot;7. 什么是Git的远程仓库？如何与远程仓库交互？&quot;">​</a></h2><p><strong>答案</strong>：远程仓库是指托管在网络上的项目版本库。与远程仓库交互：</p><ul><li>查看远程仓库：git remote -v</li><li>添加远程仓库：git remote add [shortname] [url]</li><li>从远程仓库抓取数据：git fetch [remote-name]</li><li>推送到远程仓库：git push [remote-name] [branch-name]</li><li>查看远程仓库信息：git remote show [remote-name]</li></ul><h2 id="_8-什么是git的标签-如何创建和管理标签" tabindex="-1">8. 什么是Git的标签？如何创建和管理标签？ <a class="header-anchor" href="#_8-什么是git的标签-如何创建和管理标签" aria-label="Permalink to &quot;8. 什么是Git的标签？如何创建和管理标签？&quot;">​</a></h2><p><strong>答案</strong>：Git的标签是版本库的一个快照，用于标记特定的点为重要的节点（如发布版本）。</p><p>创建和管理标签：</p><ul><li>创建轻量标签：git tag [tagname]</li><li>创建附注标签：git tag -a [tagname] -m [message]</li><li>查看标签：git tag</li><li>推送标签到远程：git push origin [tagname]</li><li>检出标签：git checkout [tagname]</li></ul><h2 id="_9-如何使用git进行代码回滚" tabindex="-1">9. 如何使用Git进行代码回滚？ <a class="header-anchor" href="#_9-如何使用git进行代码回滚" aria-label="Permalink to &quot;9. 如何使用Git进行代码回滚？&quot;">​</a></h2><p><strong>答案</strong>：Git进行代码回滚的方法：</p><ol><li>使用git reset回滚到指定提交 <ul><li>软重置：git reset --soft [commit]</li><li>硬重置：git reset --hard [commit]</li></ul></li><li>使用git revert创建一个新的提交来撤销之前的提交</li><li>使用git checkout恢复单个文件</li></ol><p>示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回滚到上一次提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 撤销最近一次提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span></span></code></pre></div><h2 id="_10-什么是git的钩子-hooks-如何使用它们" tabindex="-1">10. 什么是Git的钩子（hooks）？如何使用它们？ <a class="header-anchor" href="#_10-什么是git的钩子-hooks-如何使用它们" aria-label="Permalink to &quot;10. 什么是Git的钩子（hooks）？如何使用它们？&quot;">​</a></h2><p><strong>答案</strong>：Git钩子是在Git执行特定事件（如提交、推送等）时自动运行的脚本。</p><p>使用Git钩子：</p><ol><li>进入项目的.git/hooks目录</li><li>创建或编辑所需的钩子脚本（去掉.sample后缀）</li><li>确保脚本有执行权限</li></ol><p>常用的钩子：</p><ul><li>pre-commit：提交前运行</li><li>post-commit：提交后运行</li><li>pre-push：推送前运行</li></ul><p>示例（pre-commit钩子）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .git/hooks/pre-commit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果lint失败，阻止提交</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linting failed. Commit aborted.&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div>`,46),n=[e];function h(p,r,k,g,o,d){return s(),a("div",null,n)}const u=i(l,[["render",h]]);export{F as __pageData,u as default};
