import{_ as i,o as s,c as a,R as t}from"./chunks/framework.rSPAVkc7.js";const g=JSON.parse('{"title":"HTTPS","description":"","frontmatter":{},"headers":[],"relativePath":"前端面试学习/06浏览器与安全/04HTTPS.md","filePath":"前端面试学习/06浏览器与安全/04HTTPS.md"}'),l={name:"前端面试学习/06浏览器与安全/04HTTPS.md"},n=t(`<h1 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h1><h2 id="_1-什么是https-它与http有什么区别" tabindex="-1">1. 什么是HTTPS？它与HTTP有什么区别？ <a class="header-anchor" href="#_1-什么是https-它与http有什么区别" aria-label="Permalink to &quot;1. 什么是HTTPS？它与HTTP有什么区别？&quot;">​</a></h2><p><strong>答案</strong>：HTTPS（超文本传输安全协议）是HTTP的安全版本，使用SSL/TLS协议进行加密通信。</p><p>主要区别：</p><ol><li>安全性：HTTPS加密通信，HTTP明文传输</li><li>端口：HTTPS默认使用443端口，HTTP使用80端口</li><li>URL：HTTPS以&quot;https://&quot;开头，HTTP以&quot;http://&quot;开头</li><li>证书：HTTPS需要SSL证书，HTTP不需要</li><li>速度：由于加密解密，HTTPS通常比HTTP慢，但差距正在缩小</li><li>SEO：搜索引擎更青睐HTTPS网站</li></ol><h2 id="_2-https的工作原理是什么" tabindex="-1">2. HTTPS的工作原理是什么？ <a class="header-anchor" href="#_2-https的工作原理是什么" aria-label="Permalink to &quot;2. HTTPS的工作原理是什么？&quot;">​</a></h2><p><strong>答案</strong>：HTTPS的工作原理包括以下步骤：</p><ol><li>客户端发送ClientHello消息，包含支持的加密算法列表等信息</li><li>服务器回应ServerHello消息，选择使用的加密算法</li><li>服务器发送证书</li><li>客户端验证证书</li><li>客户端生成随机密钥，用服务器公钥加密后发送</li><li>服务器用私钥解密，获得对称密钥</li><li>双方使用对称密钥进行加密通信</li></ol><h2 id="_3-什么是ssl-tls-它们在https中的作用是什么" tabindex="-1">3. 什么是SSL/TLS？它们在HTTPS中的作用是什么？ <a class="header-anchor" href="#_3-什么是ssl-tls-它们在https中的作用是什么" aria-label="Permalink to &quot;3. 什么是SSL/TLS？它们在HTTPS中的作用是什么？&quot;">​</a></h2><p><strong>答案</strong>：SSL（安全套接字层）和其继任者TLS（传输层安全）是��网络通信提供安全及数据完整性的加密协议。</p><p>在HTTPS中的作用：</p><ol><li>加密通信内容，防止中间人攻击</li><li>验证通信双方的身份</li><li>确保数据完整性，防止数据被篡改</li></ol><h2 id="_4-如何在前端应用中配置https" tabindex="-1">4. 如何在前端应用中配置HTTPS？ <a class="header-anchor" href="#_4-如何在前端应用中配置https" aria-label="Permalink to &quot;4. 如何在前端应用中配置HTTPS？&quot;">​</a></h2><p><strong>答案</strong>：在前端配置HTTPS主要涉及以下步骤：</p><ol><li>获取SSL证书（可以使用Let&#39;s Encrypt等免费证书）</li><li>在Web服务器（如Nginx、Apache）中配置SSL证书</li><li>将所有HTTP请求重定向到HTTPS</li><li>更新前端代码中的所有绝对URL为HTTPS</li><li>使用Content Security Policy强制HTTPS连接</li><li>配置HSTS头部</li></ol><p>示例（Nginx配置）：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">443 ssl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/path/to/certificate.crt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/path/to/certificate.key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 其他配置...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">80;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://$server_name$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-什么是中间人攻击-https如何防范中间人攻击" tabindex="-1">5. 什么是中间人攻击？HTTPS如何防范中间人攻击？ <a class="header-anchor" href="#_5-什么是中间人攻击-https如何防范中间人攻击" aria-label="Permalink to &quot;5. 什么是中间人攻击？HTTPS如何防范中间人攻击？&quot;">​</a></h2><p><strong>答案</strong>：中间人攻击是攻击者插入到两个通信方之间，能够窃听和篡改他们之间传输的数据的攻击方式。</p><p>HTTPS防范中间人攻击的方式：</p><ol><li>加密通信内容，防止窃听</li><li>使用数字证书验证服务器身份</li><li>使用公钥加密和数字签名确保通信的完整性</li><li>实施证书透明度（Certificate Transparency）</li><li>使用HSTS防止SSL剥离攻击</li></ol><h2 id="_6-什么是hsts-如何实现hsts" tabindex="-1">6. 什么是HSTS？如何实现HSTS？ <a class="header-anchor" href="#_6-什么是hsts-如何实现hsts" aria-label="Permalink to &quot;6. 什么是HSTS？如何实现HSTS？&quot;">​</a></h2><p><strong>答案</strong>：HSTS（HTTP严格传输安全）是一种安全功能，强制浏览器只能通过HTTPS访问网站。</p><p>实现HSTS：</p><ol><li>配置服务器发送 Strict-Transport-Security 头部</li><li>设置适当的 max-age 值</li><li>考虑使用 includeSubDomains 指令</li><li>考虑使用 preload 指令并提交到 HSTS 预加载列表</li></ol><p>示例：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Strict-Transport-Security</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=31536000; includeSubDomains; preload</span></span></code></pre></div><h2 id="_7-什么是证书透明度-certificate-transparency-它如何提高https的安全性" tabindex="-1">7. 什么是证书透明度（Certificate Transparency）？它如何提高HTTPS的安全性？ <a class="header-anchor" href="#_7-什么是证书透明度-certificate-transparency-它如何提高https的安全性" aria-label="Permalink to &quot;7. 什么是证书透明度（Certificate Transparency）？它如何提高HTTPS的安全性？&quot;">​</a></h2><p><strong>答案</strong>：证书透明度是一个开放框架，用于监控和审核SSL/TLS证书的签发过程。</p><p>提高HTTPS安全性的方式：</p><ol><li>快速发现错误签发或恶意签发的证书</li><li>提供公开可审计的证书日志</li><li>允许网站所有者监控为其域名签发的证书</li><li>帮助识别和防止证书相关的攻击，如中间人攻击</li></ol><h2 id="_8-https对网站性能有什么影响-如何优化https的性能" tabindex="-1">8. HTTPS对网站性能有什么影响？如何优化HTTPS的性能？ <a class="header-anchor" href="#_8-https对网站性能有什么影响-如何优化https的性能" aria-label="Permalink to &quot;8. HTTPS对网站性能有什么影响？如何优化HTTPS的性能？&quot;">​</a></h2><p><strong>答案</strong>：HTTPS可能会对网站性能产生一些影响，主要是由于加密和解密过程。</p><p>优化HTTPS性能的方法：</p><ol><li>使用 OCSP stapling 减少证书验证时间</li><li>启用 HTTP/2 支持</li><li>使用会话恢复和会话缓存</li><li>选择高效的加密算法</li><li>使用 CDN 加速 HTTPS 内容分发</li><li>实施 TLS 1.3，它比之前的版本更快</li><li>使用 ECC（椭圆曲线加密）证书代替 RSA</li></ol><h2 id="_9-什么是-ssl-pinning-它在移动应用安全中的作用是什么" tabindex="-1">9. 什么是 SSL Pinning？它在移动应用安全中的作用是什么？ <a class="header-anchor" href="#_9-什么是-ssl-pinning-它在移动应用安全中的作用是什么" aria-label="Permalink to &quot;9. 什么是 SSL Pinning？它在移动应用安全中的作用是什么？&quot;">​</a></h2><p><strong>答案</strong>：SSL Pinning 是一种将服务器的证书或公钥直接嵌入到客户端应用中的技术。</p><p>在移动应用安全中的作用：</p><ol><li>防止中间人攻击，即使设备安装了恶意的根证书</li><li>确保应用只信任预定义的证书或公钥</li><li>提高对服务器身份验证的控制</li><li>减少对设备证书存储的依赖</li></ol><p>实现示例（iOS Swift）：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinnedCertificates: [SecCertificate] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 加载固定的证书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverTrust: SecTrust </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取服务器的 SecTrust 对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverCertificates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SecTrustCopyCertificateChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serverTrust) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [SecCertificate]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinnedCertificateData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinnedCertificates.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SecCertificateCopyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Data }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverCertificateData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverCertificates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SecCertificateCopyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Data }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isPinningValid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinnedCertificateData.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { pinnedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    serverCertificateData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { serverData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinnedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_10-如何处理混合内容-mixed-content-问题" tabindex="-1">10. 如何处理混合内容（Mixed Content）问题？ <a class="header-anchor" href="#_10-如何处理混合内容-mixed-content-问题" aria-label="Permalink to &quot;10. 如何处理混合内容（Mixed Content）问题？&quot;">​</a></h2><p><strong>答案</strong>：混合内容是指在 HTTPS 页面中加载 HTTP 资源，这可能会降低页面的安全性。</p><p>处理混合内容的方法：</p><ol><li>将所有资源链接更新为 HTTPS</li><li>使用相对 URL（<a href="//example.com/resource.js%EF%BC%89" target="_blank" rel="noreferrer">//example.com/resource.js）</a></li><li>实施内容安全策略（CSP）</li><li>使用 upgrade-insecure-requests CSP 指令</li><li>在服务器端设置 HSTS</li><li>使用自动化工具扫描和修复混合内容</li><li>对于无法控制的第三方资源，考虑使用代理</li></ol><p>示例（CSP 头部）：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade-insecure-requests</span></span></code></pre></div><p>这个指令会指示浏览器在发送请求之前将 HTTP 升级为 HTTPS。</p>`,48),e=[n];function h(p,k,r,d,E,o){return s(),a("div",null,e)}const T=i(l,[["render",h]]);export{g as __pageData,T as default};
