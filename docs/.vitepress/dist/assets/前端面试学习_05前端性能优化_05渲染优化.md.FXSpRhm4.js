import{_ as i,o as s,c as a,R as l}from"./chunks/framework.rSPAVkc7.js";const c=JSON.parse('{"title":"渲染优化","description":"","frontmatter":{},"headers":[],"relativePath":"前端面试学习/05前端性能优化/05渲染优化.md","filePath":"前端面试学习/05前端性能优化/05渲染优化.md"}'),n={name:"前端面试学习/05前端性能优化/05渲染优化.md"},t=l(`<h1 id="渲染优化" tabindex="-1">渲染优化 <a class="header-anchor" href="#渲染优化" aria-label="Permalink to &quot;渲染优化&quot;">​</a></h1><h2 id="_1-什么是关键渲染路径-critical-rendering-path-如何优化" tabindex="-1">1. 什么是关键渲染路径（Critical Rendering Path）？如何优化？ <a class="header-anchor" href="#_1-什么是关键渲染路径-critical-rendering-path-如何优化" aria-label="Permalink to &quot;1. 什么是关键渲染路径（Critical Rendering Path）？如何优化？&quot;">​</a></h2><p><strong>答案</strong>：关键渲染路径是浏览器将HTML、CSS和JavaScript转换为屏幕上的像素所经历的步骤。优化方法：</p><ol><li>最小化关键资源数量</li><li>最小化关键字节数</li><li>最小化关键路径长度</li><li>优化CSS加载（内联关键CSS，异步加载非关键CSS）</li><li>延迟加载JavaScript</li><li>避免长时间运行的JavaScript</li></ol><h2 id="_2-什么是重绘-repaint-和重排-reflow-如何减少它们" tabindex="-1">2. 什么是重绘（repaint）和重排（reflow）？如何减少它们？ <a class="header-anchor" href="#_2-什么是重绘-repaint-和重排-reflow-如何减少它们" aria-label="Permalink to &quot;2. 什么是重绘（repaint）和重排（reflow）？如何减少它们？&quot;">​</a></h2><p><strong>答案</strong>：</p><ul><li>重绘：元素外观改变，但不影响布局</li><li>重排：元素的位置或大小改变，需要重新计算布局</li></ul><p>减少方法：</p><ol><li>批量修改DOM</li><li>使用CSS类替代多个样式修改</li><li>使用transform和opacity进行动画</li><li>将频繁重排或重绘的元素设置为图层</li><li>使用绝对定位使元素脱离文档流</li></ol><h2 id="_3-什么是gpu加速-如何使用css触发gpu加速" tabindex="-1">3. 什么是GPU加速？如何使用CSS触发GPU加速？ <a class="header-anchor" href="#_3-什么是gpu加速-如何使用css触发gpu加速" aria-label="Permalink to &quot;3. 什么是GPU加速？如何使用CSS触发GPU加速？&quot;">​</a></h2><p><strong>答案</strong>：GPU加速是利用图形处理器来加速渲染过程。触发GPU加速的CSS属性：</p><ol><li>transform</li><li>opacity</li><li>filter</li><li>will-change</li></ol><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.accelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    will-change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: transform;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-如何优化javascript执行效率以提高渲染性能" tabindex="-1">4. 如何优化JavaScript执行效率以提高渲染性能？ <a class="header-anchor" href="#_4-如何优化javascript执行效率以提高渲染性能" aria-label="Permalink to &quot;4. 如何优化JavaScript执行效率以提高渲染性能？&quot;">​</a></h2><p><strong>答案</strong>：优化JavaScript执行效率：</p><ol><li>避免长时间运行的JavaScript</li><li>使用Web Workers处理复杂计算</li><li>使用requestAnimationFrame进行视觉更新</li><li>将大任务分解为小任务，分散执行</li><li>使用防抖（debounce）和节流（throttle）</li><li>避免频繁的垃圾回收</li></ol><h2 id="_5-什么是渲染阻塞资源-如何处理" tabindex="-1">5. 什么是渲染阻塞资源？如何处理？ <a class="header-anchor" href="#_5-什么是渲染阻塞资源-如何处理" aria-label="Permalink to &quot;5. 什么是渲染阻塞资源？如何处理？&quot;">​</a></h2><p><strong>答案</strong>：渲染阻塞资源是阻止页面首次渲染的资源，主要是CSS和JavaScript。处理方法：</p><ol><li>将CSS放在头部，JavaScript放在底部</li><li>使用async或defer属性加载非关键JavaScript</li><li>内联关键CSS</li><li>延迟加载非关键CSS</li><li>最小化和压缩CSS和JavaScript文件</li></ol><h2 id="_6-如何使用performance-api分析页面性能" tabindex="-1">6. 如何使用Performance API分析页面性能？ <a class="header-anchor" href="#_6-如何使用performance-api分析页面性能" aria-label="Permalink to &quot;6. 如何使用Performance API分析页面性能？&quot;">​</a></h2><p><strong>答案</strong>：使用Performance API分析性能：</p><ol><li>使用performance.mark()标记关键点</li><li>使用performance.measure()测量时间段</li><li>使用performance.getEntriesByType()获取性能数据</li><li>使用PerformanceObserver监听性能事件</li></ol><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行一些操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;操作耗时&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> measures</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntriesByType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;measure&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(measures);</span></span></code></pre></div><h2 id="_7-什么是rail性能模型" tabindex="-1">7. 什么是RAIL性能模型？ <a class="header-anchor" href="#_7-什么是rail性能模型" aria-label="Permalink to &quot;7. 什么是RAIL性能模型？&quot;">​</a></h2><p><strong>答案</strong>：RAIL是一个以用户为中心的性能模型，代表：</p><ul><li>Response：事件处理应在50ms内完成</li><li>Animation：每帧应在16ms内完成</li><li>Idle：利用空闲时间完成延迟的工作</li><li>Load：页面应在1000ms内呈现内容</li></ul><p>优化策略应围绕这四个方面展开。</p><h2 id="_8-如何优化首次内容绘制-first-contentful-paint-fcp" tabindex="-1">8. 如何优化首次内容绘制（First Contentful Paint, FCP）？ <a class="header-anchor" href="#_8-如何优化首次内容绘制-first-contentful-paint-fcp" aria-label="Permalink to &quot;8. 如何优化首次内容绘制（First Contentful Paint, FCP）？&quot;">​</a></h2><p><strong>答案</strong>：优化FCP的方法：</p><ol><li>最小化关键资源</li><li>减少服务器响应时间</li><li>消除渲染阻塞资源</li><li>内联关键CSS</li><li>预连接到所需的源</li><li>避免多个页面重定向</li><li>使用服务器端渲染</li><li>使用缓存策略</li></ol><h2 id="_9-什么是代码分割-code-splitting-它如何提高渲染性能" tabindex="-1">9. 什么是代码分割（Code Splitting）？它如何提高渲染性能？ <a class="header-anchor" href="#_9-什么是代码分割-code-splitting-它如何提高渲染性能" aria-label="Permalink to &quot;9. 什么是代码分割（Code Splitting）？它如何提高渲染性能？&quot;">​</a></h2><p><strong>答案</strong>：代码分割是将代码分解成小块，按需加载的技术。它提高渲染性能因为：</p><ol><li>减少主包大小，加快首次加载</li><li>允许按需或并行加载代码</li><li>可以更好地利用缓存</li></ol><p>实现方法：</p><ol><li>使用动态import()</li><li>使用React.lazy和Suspense（React）</li><li>使用路由级别的代码分割</li></ol><h2 id="_10-如何优化长列表渲染" tabindex="-1">10. 如何优化长列表渲染？ <a class="header-anchor" href="#_10-如何优化长列表渲染" aria-label="Permalink to &quot;10. 如何优化长列表渲染？&quot;">​</a></h2><p><strong>答案</strong>：优化长列表渲染的方法：</p><ol><li>虚拟滚动：只渲染可见区域的项</li><li>分页加载：每次只加载一部分数据</li><li>无限滚动：滚动到底部时加载更多</li><li>使用key属性帮助React优化更新</li><li>使用PureComponent或React.memo减少不必要的渲染</li><li>使用Web Workers处理大量数据</li></ol><p>示例（使用react-window实现虚拟滚动）：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { FixedSizeList } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-window&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{style}&gt;Row {index}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FixedSizeList</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    itemSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    itemCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {Row}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FixedSizeList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,42),h=[t];function e(p,k,r,E,d,o){return s(),a("div",null,h)}const y=i(n,[["render",e]]);export{c as __pageData,y as default};
